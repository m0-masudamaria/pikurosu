#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

#define NUM_OF_BLOCK_X	10
#define NUM_OF_BLOCK_Y	10
#define NUM_OF_HINT		8

#define W				1	/*	白ブロック	*/
#define B				2	/*	黒ブロック	*/
#define X				3	/*	ペケ印		*/

#define true			1
#define false			0

/*	ゲームブロック	*/
char GameBlocks[NUM_OF_BLOCK_Y + NUM_OF_HINT][NUM_OF_BLOCK_X + NUM_OF_HINT] = {
	{  W , W , W , W , W , W , W , W , W , W , '0',' ',' ',' ','\n'	},
	{  W , W , W , W , W , W , W , W , W , W , '2','2',' ',' ','\n'	},
	{  W , W , W , W , W , W , W , W , W , W , '1','1','1','1','\n'	},
	{  W , W , W , W , W , W , W , W , W , W , '1','1',' ',' ','\n'	},
	{  W , W , W , W , W , W , W , W , W , W , '1','1',' ',' ','\n'	},
	{  W , W , W , W , W , W , W , W , W , W , '4','4',' ',' ','\n'	},
	{  W , W , W , W , W , W , W , W , W , W , '1','1','1','1','\n'	},
	{  W , W , W , W , W , W , W , W , W , W , '1','4','1',' ','\n'	},
	{  W , W , W , W , W , W , W , W , W , W , '1','1','1','1','\n'	},
	{  W , W , W , W , W , W , W , W , W , W , '3','3',' ',' ','\n'	},
	{ '7','1','1','1','1','1','1','1','1','7','\n'					},
	{ ' ','1','1','5',' ',' ','5','1','1',' ','\n'					},
	{ ' ','1','1',' ',' ',' ',' ','1','1',' ','\n'					},
};

/*	解答ブロック	*/
char AnswerBlocks[NUM_OF_BLOCK_Y + NUM_OF_HINT][NUM_OF_BLOCK_X + NUM_OF_HINT] = {
	{  W , W , W , W , W , W , W , W , W , W },
	{  W , B , B , W , W , W , W , B , B , W },
	{  B , W , W , B , W , W , B , W , W , B },
	{  B , W , W , W , W , W , W , W , W , B },
	{  B , W , W , W , W , W , W , W , W , B },
	{  B , B , B , B , W , W , B , B , B , B },
	{  B , W , W , B , W , W , B , W , W , B },
	{  B , W , W , B , B , B , B , W , W , B },
	{  B , W , W , B , W , W , B , W , W , B },
	{  W , B , B , B , W , W , B , B , B , W },
};

// グローバル変数
int cursorX = 0;
int cursorY = 0;


// 関数プロトタイプ宣言
void printGameBlocks(void);
void CheckInput(void);
int  CheckGameClear(void);
void printAnswer(void);

//-------------------------------------------
// main関数
//-------------------------------------------
void main(void)
{
	while (1) {

		// ゲームブロックを表示する
		printGameBlocks();

		// キーボードからの入力をチェックする
		CheckInput();

		// 結果判定
		int GameClear = CheckGameClear();

		// 解答表示
		if (GameClear == true) {
			printAnswer();
			break;
		}
	}
}

//-------------------------------------------
// 関数 : printGameBlocks
// 説明 : ゲームブロックを表示する 
// 引数 : なし
// 戻値 : なし
//-------------------------------------------
void printGameBlocks(void)
{
	system("cls");

	printf("%c", ' ');

	for (int y = 0; y < 13; y++) {
		for (int x = 0; x < 15; x++) {

			if (GameBlocks[y][x] == 0) {
				break;
			}
			else if (y == cursorY && x == cursorX) {
				printf("＊");
			}
			else if (GameBlocks[y][x] == W) {			// 白ブロックを表示（削られる前）
				printf("■");
			}
			else if (GameBlocks[y][x] == B) {			// 黒グロックを表示（削られた後）
				printf("□");
			}
			else if (GameBlocks[y][x] == X) {
				printf("Ｘ");							// ペケ印を表示
			}
			else {
				printf("%c%c", GameBlocks[y][x], ' ');	// ヒントを表示
			}
		}
	}
}

//-------------------------------------------
// 関数 : CheckInput
// 説明 : キーボードからの入力をチェックする
// 引数 : なし
// 戻値 : なし 
//-------------------------------------------
void CheckInput(void)
{
	char key = _getch();

	switch (key) {
	case 'w':		// ↑
		if (cursorY > 0) {
			cursorY--;
		}
		break;

	case 's':		// ↓
		if (cursorY < NUM_OF_BLOCK_Y - 1) {
			cursorY++;
		}
		break;

	case 'a':		// ←
		if (cursorX > 0) {
			cursorX--;
		}
		break;

	case 'd':		// →
		if (cursorX < NUM_OF_BLOCK_X - 1) {
			cursorX++;
		}
		break;

	case 'x':		// ペケ印
		  /*	削ってはいけない場所をペケでマーキングする	*/
		if (GameBlocks[cursorY][cursorX] == W) {
			GameBlocks[cursorY][cursorX] = X;
		}
		else if (GameBlocks[cursorY][cursorX] == X) {
			GameBlocks[cursorY][cursorX] = W;
		}
		break;

	case '\r':																	// 削る
	  /*  削ろうとしているブロックが正解かどうかを判定する	*/
		if (AnswerBlocks[cursorY][cursorX] == B) {
			GameBlocks[cursorY][cursorX] = B;	// 正解！
		}
		else if (AnswerBlocks[cursorY][cursorX] == W) {
			printf("\a");						// 不正解！アラーム！
		}
		break;

	default:
		break;
	}
}

//-------------------------------------------
// 関数 : CheckGameClear
// 説明 : ゲームクリアを判定する
// 引数 : なし
// 戻値 : int　　true = クリア  false = 未クリア 
//-------------------------------------------
int CheckGameClear(void)
{
	int GameClear = true;

	for (int y = 0; y < NUM_OF_BLOCK_Y; y++) {
		for (int x = 0; x < NUM_OF_BLOCK_X; x++) {
			if (AnswerBlocks[y][x] == B && GameBlocks[y][x] != B) {
				GameClear = false;
				break;
			}
		}
		if (GameClear == false) {
			break;
		}
	}

	return GameClear;
}

//-------------------------------------------
// 関数 : printAnswer
// 説明 : 解答の絵を表示する 
// 引数 : なし
// 戻値 : なし
//-------------------------------------------
void printAnswer(void)
{
	system("cls");

	printf("Game Clear!!!!\n\n");

	for (int y = 0; y < NUM_OF_BLOCK_Y; y++) {
		for (int x = 0; x < NUM_OF_BLOCK_X; x++) {
			if (AnswerBlocks[y][x] == B) {
				printf("□");
			}
			else {
				printf("%c%c", ' ', ' ');
			}
		}
		printf("\n");
	}
}
